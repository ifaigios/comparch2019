Εργαστήριο 3 - Βήμα 1

1) Σύμφωνα με την βιβλιογραφία, η απορρόφηση ισχύος των κυκλωμάτων CMOS έχει τρία στοιχεία:
το dynamic, το short-circuit και το leakage power.

Tο dynamic power προκαλείται από την μεταγωγή των κυκλωμάτων,

Pswitching + Pshortcircuit

H δυναμική ισχύς είναι ανάλογη της συνολικής χωρητικότητας, της τάσης τροφοδοσίας, της ταλάντωσης τάσης κατά τη διάρκεια της μεταγωγής, της συχνότητας ροής και του συντελεστή δραστηριότητας. Όσο πιο μεγάλη συχνότητα λειτουργίας έχουμε, τόσο συχνότερα εναλλάσσονται οι δραστηριότητες και άρα έχουμε ως αποτέλεσμα αυξημένη
κατανάλωση ισχύος. 

Σε ό,τι αφορά το leakage: Τα τρανζίστορ στα κυκλώματα υπάρχει διαρροή και έτσι διαλύουν την στατική ισχύ. Το ρεύμα διαρροής εξαρτάται από το πλάτος των τρανζίστορ και την τοπική κατάσταση των συσκευών. Υπάρχουν δύο μηχανισμοί διαρροής: το subthreshold και το gate leakage.

Το subthreshold leakage συμβαίνει επειδή διέρχεται μια μικρή ροή ρεύματος μεταξύ της πηγής (source) και της drain ενός of state transistor. To gate leakage είναι η διαρροή του ρεύματος μέσω της terminal gate. Ποικίλει ανάλογα την κατάσταση της συσκευής. Τωρα αν τρέξουμε διαφορετικά προγράμματα σε εναν επεξεργαστη αυτό που θα επηρεαστεί είναι το dynamic power. Κι αυτό γιατί το dynamic power επηρεάζεται από την δραστηριότητα. Όσο πιο πολύ δραστηριότητα υπάρχει σε ένα design τόσο μεγαλύτερη ενέργεια χρειάζεται. Προφανώς όσο περισσότερη ώρα τρέχει ένα
πρόγραμμα τόση περισσοτερη ενέργεια δαπανάει κι έτσι τόσο μεγαλύτερο dynamic power εχουμε.

2) Ο επεξεργαστής των 40 watt παρόλο που είναι καταναλώνει αρκετά μεγαλύτερη ενέργεια από αυτόν του 5 watt, εκτελεί το πρόγραμμα σε πολύ μικρότερο χρόνο. Μπορεί να εκτελέσει το πρόγραμμα 10 φορές πιο γρήγορα και παραπάνω. Για αυτόν τον λόγο καταναλώνει μικρότερη ενέργεια από αυτόν των 5 watt. O mcpat δεν μας δίνει τα σχετικά αποτελέσματα που χρειαζόμαστε για να το υπολογίσουμε. Χρειάζονται και τα αποτελέσματα του gem5 ώστε να μπορούμε να συνδυάσουμε τον χρόνο που τον δείχνει ο gem5 και την ενέργεια που την δείχνει ο mcpat.

3) Επειδή μετά το τέλος του προγράμματος το σύστημα παραμένει ανοιχτό, μένει και το leakage power του καθενός. Άρα όταν περάσει αρκετή ώρα, ο ARM θα είναι πιο energy efficient.

Εργαστήριο 3 - Βήμα 2

1) Για τον υπολογισμό των ζητηθέντων υλοποιήθηκε το custom python program print_eda.py καθώς και το bash script eda.sh
Η πληροφορία για το Delay αντλήθηκε από το αρχείο stats.txt (sim_seconds)
Το Energy υπολογίστηκε πολλαπλασιάζοντας το συνολικό power draw (leakage + dynamic) με τον χρόνο εκτέλεσης (delay)

2) Αναλυτικά αποτελέσματα και γραφήματα βρίσκονται στο spreadsheet lab3-results.ods , καθώς και στον φάκελο lab3/graphs

specbzip2:

Το γινόμενο EDA γίνεται ελάχιστο ( 0.090655 ) με τις εξής παραμέτρους:
L1I_SIZE=32kB L1I_ASSOC=2 L1D_SIZE=64kB L1D_ASSOC=2 L2_SIZE=2MB L2_ASSOC=8 CACHELINE_SIZE=32

specmcf:

Το γινόμενο EDA γίνεται ελάχιστο ( 0.052468 ) με τις εξής παραμέτρους:
L1I_SIZE=32kB L1I_ASSOC=2 L1D_SIZE=64kB L1D_ASSOC=2 L2_SIZE=2MB L2_ASSOC=8 CACHELINE_SIZE=32

specsjeng:

Το γινόμενο EDA γίνεται ελάχιστο ( 3.319244 ) με τις εξής παραμέτρους:
L1I_SIZE=32kB L1I_ASSOC=2 L1D_SIZE=64kB L1D_ASSOC=4 L2_SIZE=2MB L2_ASSOC=8 CACHELINE_SIZE=64

spechmmer:

Το γινόμενο EDA γίνεται ελάχιστο ( 0.048082 ) με τις εξής παραμέτρους:
L1I_SIZE=32kB L1I_ASSOC=2 L1D_SIZE=64kB L1D_ASSOC=2 L2_SIZE=2MB L2_ASSOC=8 CACHELINE_SIZE=32

speclibm:

Το γινόμενο EDA γίνεται ελάχιστο ( 0.402260 ) με τις εξής παραμέτρους:
L1I_SIZE=32kB L1I_ASSOC=2 L1D_SIZE=64kB L1D_ASSOC=4 L2_SIZE=2MB L2_ASSOC=8 CACHELINE_SIZE=64
